import json
import os
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def count_abstracts_in_json_array_file(file_path):
    """
    Counts the number of entries in a standard JSON file (expected to be a list of objects)
    that contain an 'abstract' field.
    """
    abstract_count = 0
    
    logger.info(f"Starting to count abstracts in: {file_path}")
    logger.info("NOTE: This script assumes the file is a standard JSON array of objects.")

    try:
        # Load the entire JSON array from the file
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f) # Use json.load() for a single JSON document

        if not isinstance(data, list):
            logger.error(f"Error: Expected a JSON array (list) in '{file_path}', but found a different type.")
            return 0

        for entry in data:
            # Check if the 'abstract' key exists in each dictionary (entry)
            if "abstract" in entry and entry["abstract"] is not None:
                abstract_count += 1
        
        logger.info(f"\n--- Counting Summary for '{file_path}' ---")
        logger.info(f"Total entries processed in JSON array: {len(data)}")
        logger.info(f"Total entries containing 'abstract' field: {abstract_count}")
        logger.info("------------------------------------------")
        
    except FileNotFoundError:
        logger.error(f"Error: File not found at {file_path}")
        logger.error("Please verify the file path and ensure it exists.")
        abstract_count = -1
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding JSON from '{file_path}'. This file might be malformed or not valid JSON. Error: {e}")
        abstract_count = -1
    except Exception as e:
        logger.error(f"An unexpected error occurred while processing the file: {e}")
        abstract_count = -1
        
    return abstract_count

if __name__ == "__main__":
    # --- Configuration ---
    # Set this to the path of your abstracts.json file generated by the first script
    json_file_to_count = r"C:\Users\Vishal\Videos\all projects\minor1\arxiv_abstracts\abstracts.json"
    
    if not os.path.exists(json_file_to_count):
        logger.error(f"The specified file does not exist: {json_file_to_count}")
    else:
        final_count = count_abstracts_in_json_array_file(json_file_to_count)
        if final_count != -1:
            logger.info(f"FINAL RESULT: The file '{json_file_to_count}' contains {final_count} records with an 'abstract' field.")